/*
crispr-mageck-nf nextflow config
*/

params {
    contrasts = 'contrasts.txt'
    counts = 'counts_mageck.txt'
    cnv = 'cnv.txt'
    outputDir = 'results'
    min_count = 50
    min_rra_window = 0
}

profiles {

    standard {
        includeConfig 'conf/resources.config'
    }

    singularity {
        includeConfig 'conf/resources.config'
        includeConfig 'conf/singularity.config'
    }

    ii2 {
        includeConfig 'conf/resources.config'
        includeConfig 'conf/singularity.config'
        includeConfig 'conf/ii2.config'
    }
}

def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
